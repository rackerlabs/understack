apiVersion: v1
data:
  dexauth.py: |
    """Additional functions to process an Azure user."""
    import logging
    import os

    from django.contrib.auth.models import Group


    def _env_list(field: str) -> list[str]:
        data = os.getenv(field)
        if not data:
            return []
        if not isinstance(data, str):
            return []
        return data.split(",")


    logger = logging.getLogger("auth.Dex")
    GROUPS_ATTR_NAME = "groups"
    SUPERUSER_GROUPS = _env_list("RAX_SUPERUSER_GROUPS")
    STAFF_GROUPS = _env_list("RAX_STAFF_GROUPS")


    def group_sync(
        uid, user=None, response=None, *args, **kwargs
    ):  # pylint: disable=keyword-arg-before-vararg, unused-argument
        """Sync the users groups from Azure and set staff/superuser as
        appropriate"""
        logger.debug(f"group_sync: SUPERUSER_GROUPS: {SUPERUSER_GROUPS} STAFF_GROUPS: {STAFF_GROUPS}")
        logger.debug(f"group_sync: uid: {uid} user: {user} response: {response}")
        if user and response and response.get(GROUPS_ATTR_NAME, False):
            group_memberships = response.get(GROUPS_ATTR_NAME)
            is_staff = False
            is_superuser = False
            logger.debug(
                "User %s is a member of %s", uid, {", ".join(group_memberships)}
            )
            # Make sure all groups exist in Nautobot
            group_ids = []
            for group in group_memberships:
                if group in SUPERUSER_GROUPS:
                    is_superuser = True
                if group in STAFF_GROUPS:
                    is_staff = True
                logger.debug(f"group_sync: uid: {uid} group: {group} is_staff: {is_staff} is_superuser: {is_superuser}")
                group_ids.append(Group.objects.get_or_create(name=group)[0].id)
            user.groups.set(group_ids)
            user.is_superuser = is_superuser
            user.is_staff = is_staff
            user.save()
            logger.debug(f"group_sync: saved uid: {uid} group_ids: {group_ids} is_staff: {is_staff} is_superuser: {is_superuser}")
        else:
            logger.debug("Did not receive groups from Dex, response: %s", response)
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: dexauth
