# Defaults: https://github.com/nautobot/helm-charts/blob/develop/charts/nautobot/values.yaml
---

nautobot:

  db:
    engine: "django.db.backends.postgresql"

    # Using CloudNative postgres operator:
    host: "nautobot-cluster-rw.nautobot.svc"
    name: "app"
    user: "app"
    existingSecret: "nautobot-cluster-app"
    existingSecretPasswordKey: "password"

  django:
    existingSecret: nautobot-django

  # used by Argo Workflows to update data
  superUser:
    enabled: true
    existingSecret: nautobot-superuser
    existingSecretPasswordKey: password
    existingSecretApiTokenKey: apitoken

  extraVolumes:
    - name: nautobot-sso
      secret:
        secretName: nautobot-sso
        defaultMode: 420
        optional: false

  extraVolumeMounts:
    - name: nautobot-sso
      mountPath: /opt/nautobot/sso/
      readOnly: true

  extraEnvVarsCM:
    - nautobot-sso
  extraEnvVarsSecret:
    - nautobot-custom-env

  resources:
    # Increases CPU as the defaults are a little too low for our needs
    requests:
      cpu: "1000m"
      memory: "1536M"
    limits:
      cpu: "2000m"
      memory: "8704M"

  livenessProbe:
    periodSeconds: 120
    timeoutSeconds: 60

celery:
  replicaCount: 1
  extraEnvVarsSecret:
    - nautobot-django
    - nautobot-custom-env
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 120
    timeoutSeconds: 60
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 120
    timeoutSeconds: 60


postgresql:
  enabled: false

redis:
  enabled: true
  auth:
    existingSecret: nautobot-redis
    existingSecretPasswordKey: NAUTOBOT_REDIS_PASSWORD
  commonAnnotations:
    # do not allow ArgoCD to delete our redis
    argocd.argoproj.io/sync-options: Delete=false

ingress:
  enabled: true
  ingressClassName: "nginx"
  tls: true
  secretName: "nautobot-ingress-tls"
  annotations:
    cert-manager.io/cluster-issuer: understack-cluster-issuer
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS

# (nicholas.kuechler) seeing something unexpected:
# https://networktocode.slack.com/archives/C01NWPK6WHL/p1736445485521569
metrics:
  enabled: true
  prometheusRule:
    enabled: true

extraObjects:
  - apiVersion: batch/v1
    kind: Job
    metadata:
      generateName: sync-nautobot-ansible-
      namespace: nautobot
      annotations:
        "helm.sh/hook": post-install,post-upgrade
    spec:
      template:
        spec:
          containers:
            - name: ansible-runner
              image: ghcr.io/rackerlabs/understack/ansible:latest
              imagePullPolicy: Always
              command: ["ansible-runner", "run", "/runner", "--playbook", "nautobot-initial-setup.yaml"]
              env:
                - name: NAUTOBOT_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: nautobot-superuser
                      key: apitoken
                - name: NAUTOBOT_URL
                  value: http://nautobot-default.nautobot.svc.cluster.local
              volumeMounts:
                - name: ansible-inventory
                  mountPath: /runner/inventory/
                - name: ansible-group-vars
                  mountPath: /runner/inventory/group_vars/
          restartPolicy: Never
          volumes:
            - name: runner-data
              emptyDir: {}
            - name: ansible-inventory
              configMap:
                name: ansible-inventory
            - name: ansible-group-vars
              configMap:
                name: ansible-group-vars
      backoffLimit: 1
