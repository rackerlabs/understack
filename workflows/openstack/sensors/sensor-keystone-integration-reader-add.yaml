---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: keystone-integration-reader-add
  namespace: openstack
spec:
  template:
    serviceAccountName: k8s-openstack-events-secrets
  # events the Sensor listens for
  dependencies:
    - name: secret-dep
      eventName: keystone-integration-reader-add
      eventSourceName: k8s-openstack-secrets
  # actions executed when dependencies are satisfied (StandardK8STrigger designed to create or update a generic Kubernetes resource.)
  triggers:
    - template:
        name: keystone-user-create-update
        k8s:
          operation: create
          source:
            resource:
              apiVersion: batch/v1
              kind: Job
              metadata:
                generateName: keystone-integration-reader-add-
              spec:
                ttlSecondsAfterFinished: 600
                backoffLimit: 3
                template:
                  spec:
                    containers:
                      - name: keystone-user-create-update
                        image: quay.io/airshipit/heat:2024.2-ubuntu_jammy
                        command: ["sh", "-c"]
                        args:
                          - |
                            echo "Received Secret Event ${EVENT_TYPE} for ${SECRET_NAME}"
                            set -x
                            SVC_ROLES=$(python -c "import json,os; print(json.loads(os.environ.get('LABELS') or '{}').get('understack.rackspace.com/keystone-role',''))")
                            SVC_USER=$(python -c "import json,os; print(json.loads(os.environ.get('LABELS') or '{}').get('understack.rackspace.com/keystone-user',''))")
                            SVC_USER=${SVC_USER:-$SECRET_NAME}
                            PROJ_ID=$(openstack project create --or-show --domain service integration -f value -c id)
                            SVC_ID=$(openstack user create --or-show --domain service --project "${PROJ_ID}" --description "${SECRET_NAME}" "${SVC_USER}" -f value -c id)
                            openstack user set --description "${SECRET_NAME}" --project "${PROJ_ID}" "${SVC_ID}"
                            set +x
                            svc_pass=$(cat /tmp/user-create/password)
                            openstack user set --password "${svc_pass}" "${SVC_ID}"
                            set -x
                            openstack role add --user "${SVC_ID}" --project "${PROJ_ID}" reader
                            IFS=','
                            for svc_role in ${SVC_ROLES}; do
                              case ${svc_role} in
                              tenant-reader)
                                openstack role add --user "${SVC_ID}" --domain default --inherited reader
                                ;;
                              tenant-readwrite)
                                openstack role add --user "${SVC_ID}" --domain default --inherited member
                                ;;
                              infra-reader)
                                openstack role add --user "${SVC_ID}" --project-domain infra --project baremetal reader
                                ;;
                              infra-readwrite)
                                openstack role add --user "${SVC_ID}" --project-domain infra --project baremetal admin
                                ;;
                              *)
                                echo "Invalid role ${svc_role}"
                                ;;
                              esac
                            done
                        env:
                          - name: EVENT_TYPE
                            value: "placeholder"
                          - name: SECRET_NAME
                            value: "placeholder"
                          - name: LABELS
                            value: "placeholder"
                        envFrom:
                          - secretRef:
                              name: keystone-keystone-admin
                        volumeMounts:
                          - name: user-create
                            mountPath: /tmp/user-create
                    volumes:
                      - name: user-create
                        secret:
                          secretName: "placeholder"
                    restartPolicy: OnFailure
          parameters:
            - src:
                dependencyName: secret-dep
                dataKey: body.type
              dest: spec.template.spec.containers.0.env.0.value
            - src:
                dependencyName: secret-dep
                dataKey: body.metadata.name
              dest: spec.template.spec.containers.0.env.1.value
            - src:
                dependencyName: secret-dep
                dataKey: body.metadata.labels
              dest: spec.template.spec.containers.0.env.2.value
            - src:
                dependencyName: secret-dep
                dataKey: body.metadata.name
              dest: spec.template.spec.volumes.0.secret.secretName
