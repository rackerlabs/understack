name: container builds

on:
  push:
    tags:
      - v*
    branches:
      - main
    paths:
      - "ansible/**"
      - "containers/**"
      - ".github/workflows/containers.yaml"
      - "python/**"
      - "docker-bake.hcl"
  pull_request:
    types: [opened, synchronize, reopened, closed]
    paths:
      - "ansible/**"
      - "containers/**"
      - ".github/workflows/containers.yaml"
      - "python/**"
      - "docker-bake.hcl"
  workflow_dispatch:
  merge_group:
    types: [checks_requested]

env:
  OPENSTACK_VERSION: 2024.2
  REGISTRY: ghcr.io/rackerlabs/understack

jobs:
  build:
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup docker buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: login to ghcr.io
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set tag based on event
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "tag=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "tag=${{ env.OPENSTACK_VERSION }}-ubuntu_jammy" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: build and push with docker bake
        uses: docker/bake-action@2e3d19baedb14545e5d41222653874f25d43b545 # v5
        with:
          push: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
          set: |
            *.platform=linux/amd64,linux/arm64
        env:
          REGISTRY: ${{ env.REGISTRY }}
          TAG: ${{ steps.tag.outputs.tag }}
          OPENSTACK_VERSION: ${{ env.OPENSTACK_VERSION }}

  get_targets:
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    needs: build
    outputs:
      targets: ${{ steps.targets.outputs.targets }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: extract targets from docker-bake.hcl
        id: targets
        run: |
          # Extract target names from the default group in docker-bake.hcl
          targets=$(grep -A 20 'group "default"' docker-bake.hcl | \
                   sed -n '/targets = \[/,/\]/p' | \
                   grep -o '"[^"]*"' | \
                   tr -d '"' | \
                   jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "targets=$targets" >> $GITHUB_OUTPUT
          echo "Found targets: $targets"

  security_scan:
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    needs: get_targets

    permissions:
      security-events: write
      contents: read

    strategy:
      matrix:
        container: ${{ fromJson(needs.get_targets.outputs.targets) }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set tag based on event
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "tag=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "tag=${{ env.OPENSTACK_VERSION }}-ubuntu_jammy" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: run trivy vulnerability scanner
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b9c9a2fa0 # v0.24.0
        with:
          image-ref: '${{ env.REGISTRY }}/${{ matrix.container }}:${{ steps.tag.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.container }}.sarif'

      - name: upload trivy results to github security tab
        uses: github/codeql-action/upload-sarif@ea9e4e37992a54ee68a9622e985e60c8e8f12d9f # v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.container }}.sarif'
          category: 'trivy-${{ matrix.container }}'

  get_cleanup_targets:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.targets.outputs.targets }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: extract targets from docker-bake.hcl
        id: targets
        run: |
          # Extract target names from the default group in docker-bake.hcl
          targets=$(grep -A 20 'group "default"' docker-bake.hcl | \
                   sed -n '/targets = \[/,/\]/p' | \
                   grep -o '"[^"]*"' | \
                   tr -d '"' | \
                   jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "targets=$targets" >> $GITHUB_OUTPUT
          echo "Found cleanup targets: $targets"

  clean_containers:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    needs: get_cleanup_targets

    permissions:
      packages: write

    strategy:
      matrix:
        container: ${{ fromJson(needs.get_cleanup_targets.outputs.targets) }}

    steps:
      - name: clean up PR container
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          CONTAINER_NAME: '${{ matrix.container }}'
        with:
          script: |
            const container_name = `${context.repo.repo}/${process.env.CONTAINER_NAME}`;
            const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: "container",
              package_name: container_name,
              org: context.repo.owner,
            });

            const target_tag = `pr-${context.payload.pull_request.number}`;
            console.log(`Looking for tag ${target_tag} for container ${container_name}`);

            const versions = response.data || [];
            const matchingVersion = versions.find(version =>
              version.metadata.container.tags.includes(target_tag)
            );

            if (matchingVersion) {
              console.log(`Found tag to delete "${target_tag}":`, matchingVersion.html_url);
              await github.rest.packages.deletePackageVersionForOrg({
                package_type: "container",
                package_name: container_name,
                org: context.repo.owner,
                package_version_id: matchingVersion.id,
              });
              console.log("Tag deleted");
            } else {
              console.log(`No package version found with the tag "${target_tag}".`);
            }
